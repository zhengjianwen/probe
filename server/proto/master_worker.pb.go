// Code generated by protoc-gen-go. DO NOT EDIT.
// source: master_worker.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	master_worker.proto

It has these top-level messages:
	Topic
	TaskInfo
	TaskResult
	Task_Http
	Task_Dns
	Task_Ping
	Task_Traceroute
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type TopicType int32

const (
	Topic__             TopicType = 0
	Topic_CONNECT       TopicType = 1
	Topic_RESULT        TopicType = 2
	Topic_HEALTH_REPORT TopicType = 3
)

var TopicType_name = map[int32]string{
	0: "_",
	1: "CONNECT",
	2: "RESULT",
	3: "HEALTH_REPORT",
}
var TopicType_value = map[string]int32{
	"_":             0,
	"CONNECT":       1,
	"RESULT":        2,
	"HEALTH_REPORT": 3,
}

func (x TopicType) String() string {
	return proto1.EnumName(TopicType_name, int32(x))
}
func (TopicType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type TaskInfoType int32

const (
	TaskInfo__              TaskInfoType = 0
	TaskInfo_UNHEALTH_CHECK TaskInfoType = 1
	TaskInfo_HTTP           TaskInfoType = 2
	TaskInfo_DNS            TaskInfoType = 3
	TaskInfo_PING           TaskInfoType = 4
	TaskInfo_TRACE_ROUTE    TaskInfoType = 5
)

var TaskInfoType_name = map[int32]string{
	0: "_",
	1: "UNHEALTH_CHECK",
	2: "HTTP",
	3: "DNS",
	4: "PING",
	5: "TRACE_ROUTE",
}
var TaskInfoType_value = map[string]int32{
	"_":              0,
	"UNHEALTH_CHECK": 1,
	"HTTP":           2,
	"DNS":            3,
	"PING":           4,
	"TRACE_ROUTE":    5,
}

func (x TaskInfoType) String() string {
	return proto1.EnumName(TaskInfoType_name, int32(x))
}
func (TaskInfoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type TaskResultCode int32

const (
	TaskResult__                            TaskResultCode = 0
	TaskResult_OK                           TaskResultCode = 1
	TaskResult_ERR_HTTP_NEW_REQUEST         TaskResultCode = 2
	TaskResult_ERR_HTTP_DO_REQUEST          TaskResultCode = 3
	TaskResult_ERR_HTTP_READ_BODY           TaskResultCode = 4
	TaskResult_ERR_HTTP_STATUS_CODE_UNMATCH TaskResultCode = 5
	TaskResult_ERR_HTTP_HEAD_UNMATCH        TaskResultCode = 6
	TaskResult_ERR_HTTP_BODY_UNMATCH        TaskResultCode = 7
	TaskResult_ERR_HTTP_TIMEOUT             TaskResultCode = 8
	TaskResult_ERR_HTTP_OTHER               TaskResultCode = 9
)

var TaskResultCode_name = map[int32]string{
	0: "_",
	1: "OK",
	2: "ERR_HTTP_NEW_REQUEST",
	3: "ERR_HTTP_DO_REQUEST",
	4: "ERR_HTTP_READ_BODY",
	5: "ERR_HTTP_STATUS_CODE_UNMATCH",
	6: "ERR_HTTP_HEAD_UNMATCH",
	7: "ERR_HTTP_BODY_UNMATCH",
	8: "ERR_HTTP_TIMEOUT",
	9: "ERR_HTTP_OTHER",
}
var TaskResultCode_value = map[string]int32{
	"_":  0,
	"OK": 1,
	"ERR_HTTP_NEW_REQUEST":         2,
	"ERR_HTTP_DO_REQUEST":          3,
	"ERR_HTTP_READ_BODY":           4,
	"ERR_HTTP_STATUS_CODE_UNMATCH": 5,
	"ERR_HTTP_HEAD_UNMATCH":        6,
	"ERR_HTTP_BODY_UNMATCH":        7,
	"ERR_HTTP_TIMEOUT":             8,
	"ERR_HTTP_OTHER":               9,
}

func (x TaskResultCode) String() string {
	return proto1.EnumName(TaskResultCode_name, int32(x))
}
func (TaskResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Task_HttpMethod int32

const (
	Task_Http___   Task_HttpMethod = 0
	Task_Http_GET  Task_HttpMethod = 1
	Task_Http_POST Task_HttpMethod = 2
	Task_Http_HEAD Task_HttpMethod = 3
)

var Task_HttpMethod_name = map[int32]string{
	0: "__",
	1: "GET",
	2: "POST",
	3: "HEAD",
}
var Task_HttpMethod_value = map[string]int32{
	"__":   0,
	"GET":  1,
	"POST": 2,
	"HEAD": 3,
}

func (x Task_HttpMethod) String() string {
	return proto1.EnumName(Task_HttpMethod_name, int32(x))
}
func (Task_HttpMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Task_HttpMatcherTarget int32

const (
	Task_HttpMatcher____  Task_HttpMatcherTarget = 0
	Task_HttpMatcher_BODY Task_HttpMatcherTarget = 1
	Task_HttpMatcher_HEAD Task_HttpMatcherTarget = 2
)

var Task_HttpMatcherTarget_name = map[int32]string{
	0: "___",
	1: "BODY",
	2: "HEAD",
}
var Task_HttpMatcherTarget_value = map[string]int32{
	"___":  0,
	"BODY": 1,
	"HEAD": 2,
}

func (x Task_HttpMatcherTarget) String() string {
	return proto1.EnumName(Task_HttpMatcherTarget_name, int32(x))
}
func (Task_HttpMatcherTarget) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0, 0} }

type Task_HttpMatcherMethod int32

const (
	Task_HttpMatcher______   Task_HttpMatcherMethod = 0
	Task_HttpMatcher_INCLUDE Task_HttpMatcherMethod = 1
	Task_HttpMatcher_EXCLUDE Task_HttpMatcherMethod = 2
)

var Task_HttpMatcherMethod_name = map[int32]string{
	0: "_____",
	1: "INCLUDE",
	2: "EXCLUDE",
}
var Task_HttpMatcherMethod_value = map[string]int32{
	"_____":   0,
	"INCLUDE": 1,
	"EXCLUDE": 2,
}

func (x Task_HttpMatcherMethod) String() string {
	return proto1.EnumName(Task_HttpMatcherMethod_name, int32(x))
}
func (Task_HttpMatcherMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0, 1} }

type Task_DnsType int32

const (
	Task_Dns______ Task_DnsType = 0
	Task_Dns_A     Task_DnsType = 1
	Task_Dns_MX    Task_DnsType = 2
	Task_Dns_NS    Task_DnsType = 3
	Task_Dns_CNAME Task_DnsType = 4
	Task_Dns_TXT   Task_DnsType = 5
	Task_Dns_ANY   Task_DnsType = 6
)

var Task_DnsType_name = map[int32]string{
	0: "_____",
	1: "A",
	2: "MX",
	3: "NS",
	4: "CNAME",
	5: "TXT",
	6: "ANY",
}
var Task_DnsType_value = map[string]int32{
	"_____": 0,
	"A":     1,
	"MX":    2,
	"NS":    3,
	"CNAME": 4,
	"TXT":   5,
	"ANY":   6,
}

func (x Task_DnsType) String() string {
	return proto1.EnumName(Task_DnsType_name, int32(x))
}
func (Task_DnsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Topic struct {
	Type       TopicType   `protobuf:"varint,1,opt,name=Type,json=type,enum=proto.TopicType" json:"Type,omitempty"`
	WorkerId   string      `protobuf:"bytes,2,opt,name=WorkerId,json=workerId" json:"WorkerId,omitempty"`
	WorkerTime int64       `protobuf:"varint,3,opt,name=WorkerTime,json=workerTime" json:"WorkerTime,omitempty"`
	Result     *TaskResult `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto1.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Topic) GetType() TopicType {
	if m != nil {
		return m.Type
	}
	return Topic__
}

func (m *Topic) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *Topic) GetWorkerTime() int64 {
	if m != nil {
		return m.WorkerTime
	}
	return 0
}

func (m *Topic) GetResult() *TaskResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type TaskInfo struct {
	TaskId          string           `protobuf:"bytes,1,opt,name=TaskId,json=taskId" json:"TaskId,omitempty"`
	Type            TaskInfoType     `protobuf:"varint,2,opt,name=Type,json=type,enum=proto.TaskInfoType" json:"Type,omitempty"`
	Version         string           `protobuf:"bytes,3,opt,name=Version,json=version" json:"Version,omitempty"`
	CreateTime      int64            `protobuf:"varint,4,opt,name=CreateTime,json=createTime" json:"CreateTime,omitempty"`
	UpdateTime      int64            `protobuf:"varint,5,opt,name=UpdateTime,json=updateTime" json:"UpdateTime,omitempty"`
	ExecuteTime     int64            `protobuf:"varint,6,opt,name=ExecuteTime,json=executeTime" json:"ExecuteTime,omitempty"`
	ScheduleTime    int64            `protobuf:"varint,7,opt,name=ScheduleTime,json=scheduleTime" json:"ScheduleTime,omitempty"`
	PeriodSec       uint32           `protobuf:"varint,8,opt,name=PeriodSec,json=periodSec" json:"PeriodSec,omitempty"`
	Http_Spec       *Task_Http       `protobuf:"bytes,9,opt,name=Http_Spec,json=httpSpec" json:"Http_Spec,omitempty"`
	Dns_Spec        *Task_Dns        `protobuf:"bytes,10,opt,name=Dns_Spec,json=dnsSpec" json:"Dns_Spec,omitempty"`
	Ping_Spec       *Task_Ping       `protobuf:"bytes,11,opt,name=Ping_Spec,json=pingSpec" json:"Ping_Spec,omitempty"`
	Traceroute_Spec *Task_Traceroute `protobuf:"bytes,12,opt,name=Traceroute_Spec,json=tracerouteSpec" json:"Traceroute_Spec,omitempty"`
}

func (m *TaskInfo) Reset()                    { *m = TaskInfo{} }
func (m *TaskInfo) String() string            { return proto1.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()               {}
func (*TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskInfo) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskInfo) GetType() TaskInfoType {
	if m != nil {
		return m.Type
	}
	return TaskInfo__
}

func (m *TaskInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TaskInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *TaskInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *TaskInfo) GetExecuteTime() int64 {
	if m != nil {
		return m.ExecuteTime
	}
	return 0
}

func (m *TaskInfo) GetScheduleTime() int64 {
	if m != nil {
		return m.ScheduleTime
	}
	return 0
}

func (m *TaskInfo) GetPeriodSec() uint32 {
	if m != nil {
		return m.PeriodSec
	}
	return 0
}

func (m *TaskInfo) GetHttp_Spec() *Task_Http {
	if m != nil {
		return m.Http_Spec
	}
	return nil
}

func (m *TaskInfo) GetDns_Spec() *Task_Dns {
	if m != nil {
		return m.Dns_Spec
	}
	return nil
}

func (m *TaskInfo) GetPing_Spec() *Task_Ping {
	if m != nil {
		return m.Ping_Spec
	}
	return nil
}

func (m *TaskInfo) GetTraceroute_Spec() *Task_Traceroute {
	if m != nil {
		return m.Traceroute_Spec
	}
	return nil
}

type TaskResult struct {
	TaskId     string                `protobuf:"bytes,1,opt,name=TaskId,json=taskId" json:"TaskId,omitempty"`
	Success    bool                  `protobuf:"varint,2,opt,name=Success,json=success" json:"Success,omitempty"`
	ErrorCode  TaskResultCode        `protobuf:"varint,3,opt,name=ErrorCode,json=errorCode,enum=proto.TaskResultCode" json:"ErrorCode,omitempty"`
	Error      string                `protobuf:"bytes,4,opt,name=Error,json=error" json:"Error,omitempty"`
	DelayMs    int64                 `protobuf:"varint,5,opt,name=DelayMs,json=delayMs" json:"DelayMs,omitempty"`
	StartMs    int64                 `protobuf:"varint,6,opt,name=StartMs,json=startMs" json:"StartMs,omitempty"`
	Ping       *TaskResultPing       `protobuf:"bytes,7,opt,name=Ping,json=ping" json:"Ping,omitempty"`
	Traceroute *TaskResultTraceroute `protobuf:"bytes,8,opt,name=Traceroute,json=traceroute" json:"Traceroute,omitempty"`
}

func (m *TaskResult) Reset()                    { *m = TaskResult{} }
func (m *TaskResult) String() string            { return proto1.CompactTextString(m) }
func (*TaskResult) ProtoMessage()               {}
func (*TaskResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TaskResult) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TaskResult) GetErrorCode() TaskResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return TaskResult__
}

func (m *TaskResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TaskResult) GetDelayMs() int64 {
	if m != nil {
		return m.DelayMs
	}
	return 0
}

func (m *TaskResult) GetStartMs() int64 {
	if m != nil {
		return m.StartMs
	}
	return 0
}

func (m *TaskResult) GetPing() *TaskResultPing {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *TaskResult) GetTraceroute() *TaskResultTraceroute {
	if m != nil {
		return m.Traceroute
	}
	return nil
}

type TaskResultPing struct {
	Lost uint32 `protobuf:"varint,1,opt,name=lost" json:"lost,omitempty"`
}

func (m *TaskResultPing) Reset()                    { *m = TaskResultPing{} }
func (m *TaskResultPing) String() string            { return proto1.CompactTextString(m) }
func (*TaskResultPing) ProtoMessage()               {}
func (*TaskResultPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *TaskResultPing) GetLost() uint32 {
	if m != nil {
		return m.Lost
	}
	return 0
}

type TaskResultTraceroute struct {
	Hops    int32 `protobuf:"varint,1,opt,name=Hops,json=hops" json:"Hops,omitempty"`
	ErrHops int32 `protobuf:"varint,2,opt,name=ErrHops,json=errHops" json:"ErrHops,omitempty"`
}

func (m *TaskResultTraceroute) Reset()                    { *m = TaskResultTraceroute{} }
func (m *TaskResultTraceroute) String() string            { return proto1.CompactTextString(m) }
func (*TaskResultTraceroute) ProtoMessage()               {}
func (*TaskResultTraceroute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *TaskResultTraceroute) GetHops() int32 {
	if m != nil {
		return m.Hops
	}
	return 0
}

func (m *TaskResultTraceroute) GetErrHops() int32 {
	if m != nil {
		return m.ErrHops
	}
	return 0
}

type Task_Http struct {
	Url       string              `protobuf:"bytes,1,opt,name=Url,json=url" json:"Url,omitempty"`
	Method    Task_HttpMethod     `protobuf:"varint,2,opt,name=Method,json=method,enum=proto.Task_HttpMethod" json:"Method,omitempty"`
	Header    map[string]string   `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cookies   string              `protobuf:"bytes,4,opt,name=Cookies,json=cookies" json:"Cookies,omitempty"`
	BasicAuth *Task_HttpBasicAuth `protobuf:"bytes,5,opt,name=BasicAuth,json=basicAuth" json:"BasicAuth,omitempty"`
	ServerIp  string              `protobuf:"bytes,6,opt,name=ServerIp,json=serverIp" json:"ServerIp,omitempty"`
	Matcher   *Task_HttpMatcher   `protobuf:"bytes,7,opt,name=Matcher,json=matcher" json:"Matcher,omitempty"`
}

func (m *Task_Http) Reset()                    { *m = Task_Http{} }
func (m *Task_Http) String() string            { return proto1.CompactTextString(m) }
func (*Task_Http) ProtoMessage()               {}
func (*Task_Http) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Task_Http) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Task_Http) GetMethod() Task_HttpMethod {
	if m != nil {
		return m.Method
	}
	return Task_Http___
}

func (m *Task_Http) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Task_Http) GetCookies() string {
	if m != nil {
		return m.Cookies
	}
	return ""
}

func (m *Task_Http) GetBasicAuth() *Task_HttpBasicAuth {
	if m != nil {
		return m.BasicAuth
	}
	return nil
}

func (m *Task_Http) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *Task_Http) GetMatcher() *Task_HttpMatcher {
	if m != nil {
		return m.Matcher
	}
	return nil
}

type Task_HttpMatcher struct {
	Target     Task_HttpMatcherTarget `protobuf:"varint,1,opt,name=Target,json=target,enum=proto.Task_HttpMatcherTarget" json:"Target,omitempty"`
	Method     Task_HttpMatcherMethod `protobuf:"varint,2,opt,name=Method,json=method,enum=proto.Task_HttpMatcherMethod" json:"Method,omitempty"`
	Content    string                 `protobuf:"bytes,3,opt,name=Content,json=content" json:"Content,omitempty"`
	StatusCode int32                  `protobuf:"varint,4,opt,name=StatusCode,json=statusCode" json:"StatusCode,omitempty"`
}

func (m *Task_HttpMatcher) Reset()                    { *m = Task_HttpMatcher{} }
func (m *Task_HttpMatcher) String() string            { return proto1.CompactTextString(m) }
func (*Task_HttpMatcher) ProtoMessage()               {}
func (*Task_HttpMatcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *Task_HttpMatcher) GetTarget() Task_HttpMatcherTarget {
	if m != nil {
		return m.Target
	}
	return Task_HttpMatcher____
}

func (m *Task_HttpMatcher) GetMethod() Task_HttpMatcherMethod {
	if m != nil {
		return m.Method
	}
	return Task_HttpMatcher______
}

func (m *Task_HttpMatcher) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Task_HttpMatcher) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

type Task_HttpBasicAuth struct {
	User   string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=Passwd,json=passwd" json:"Passwd,omitempty"`
}

func (m *Task_HttpBasicAuth) Reset()                    { *m = Task_HttpBasicAuth{} }
func (m *Task_HttpBasicAuth) String() string            { return proto1.CompactTextString(m) }
func (*Task_HttpBasicAuth) ProtoMessage()               {}
func (*Task_HttpBasicAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *Task_HttpBasicAuth) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Task_HttpBasicAuth) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type Task_Dns struct {
	Domain         string       `protobuf:"bytes,1,opt,name=Domain,json=domain" json:"Domain,omitempty"`
	Type           Task_DnsType `protobuf:"varint,2,opt,name=Type,json=type,enum=proto.Task_DnsType" json:"Type,omitempty"`
	IfMatchIp      bool         `protobuf:"varint,3,opt,name=IfMatchIp,json=ifMatchIp" json:"IfMatchIp,omitempty"`
	MatchIps       []string     `protobuf:"bytes,4,rep,name=MatchIps,json=matchIps" json:"MatchIps,omitempty"`
	IfMatchDomain  bool         `protobuf:"varint,5,opt,name=IfMatchDomain,json=ifMatchDomain" json:"IfMatchDomain,omitempty"`
	MatchDomains   []string     `protobuf:"bytes,6,rep,name=MatchDomains,json=matchDomains" json:"MatchDomains,omitempty"`
	ServerDesigned bool         `protobuf:"varint,7,opt,name=ServerDesigned,json=serverDesigned" json:"ServerDesigned,omitempty"`
	DNSServer      string       `protobuf:"bytes,8,opt,name=DNSServer,json=dNSServer" json:"DNSServer,omitempty"`
}

func (m *Task_Dns) Reset()                    { *m = Task_Dns{} }
func (m *Task_Dns) String() string            { return proto1.CompactTextString(m) }
func (*Task_Dns) ProtoMessage()               {}
func (*Task_Dns) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Task_Dns) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Task_Dns) GetType() Task_DnsType {
	if m != nil {
		return m.Type
	}
	return Task_Dns______
}

func (m *Task_Dns) GetIfMatchIp() bool {
	if m != nil {
		return m.IfMatchIp
	}
	return false
}

func (m *Task_Dns) GetMatchIps() []string {
	if m != nil {
		return m.MatchIps
	}
	return nil
}

func (m *Task_Dns) GetIfMatchDomain() bool {
	if m != nil {
		return m.IfMatchDomain
	}
	return false
}

func (m *Task_Dns) GetMatchDomains() []string {
	if m != nil {
		return m.MatchDomains
	}
	return nil
}

func (m *Task_Dns) GetServerDesigned() bool {
	if m != nil {
		return m.ServerDesigned
	}
	return false
}

func (m *Task_Dns) GetDNSServer() string {
	if m != nil {
		return m.DNSServer
	}
	return ""
}

type Task_Ping struct {
	Destination string `protobuf:"bytes,1,opt,name=Destination,json=destination" json:"Destination,omitempty"`
	Count       int32  `protobuf:"varint,2,opt,name=Count,json=count" json:"Count,omitempty"`
	Timeout     int32  `protobuf:"varint,3,opt,name=Timeout,json=timeout" json:"Timeout,omitempty"`
}

func (m *Task_Ping) Reset()                    { *m = Task_Ping{} }
func (m *Task_Ping) String() string            { return proto1.CompactTextString(m) }
func (*Task_Ping) ProtoMessage()               {}
func (*Task_Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Task_Ping) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Task_Ping) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Task_Ping) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type Task_Traceroute struct {
	Destination string `protobuf:"bytes,1,opt,name=Destination,json=destination" json:"Destination,omitempty"`
}

func (m *Task_Traceroute) Reset()                    { *m = Task_Traceroute{} }
func (m *Task_Traceroute) String() string            { return proto1.CompactTextString(m) }
func (*Task_Traceroute) ProtoMessage()               {}
func (*Task_Traceroute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Task_Traceroute) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func init() {
	proto1.RegisterType((*Topic)(nil), "proto.Topic")
	proto1.RegisterType((*TaskInfo)(nil), "proto.TaskInfo")
	proto1.RegisterType((*TaskResult)(nil), "proto.taskResult")
	proto1.RegisterType((*TaskResultPing)(nil), "proto.taskResult.ping")
	proto1.RegisterType((*TaskResultTraceroute)(nil), "proto.taskResult.traceroute")
	proto1.RegisterType((*Task_Http)(nil), "proto.Task_Http")
	proto1.RegisterType((*Task_HttpMatcher)(nil), "proto.Task_Http.matcher")
	proto1.RegisterType((*Task_HttpBasicAuth)(nil), "proto.Task_Http.basicAuth")
	proto1.RegisterType((*Task_Dns)(nil), "proto.Task_Dns")
	proto1.RegisterType((*Task_Ping)(nil), "proto.Task_Ping")
	proto1.RegisterType((*Task_Traceroute)(nil), "proto.Task_Traceroute")
	proto1.RegisterEnum("proto.TopicType", TopicType_name, TopicType_value)
	proto1.RegisterEnum("proto.TaskInfoType", TaskInfoType_name, TaskInfoType_value)
	proto1.RegisterEnum("proto.TaskResultCode", TaskResultCode_name, TaskResultCode_value)
	proto1.RegisterEnum("proto.Task_HttpMethod", Task_HttpMethod_name, Task_HttpMethod_value)
	proto1.RegisterEnum("proto.Task_HttpMatcherTarget", Task_HttpMatcherTarget_name, Task_HttpMatcherTarget_value)
	proto1.RegisterEnum("proto.Task_HttpMatcherMethod", Task_HttpMatcherMethod_name, Task_HttpMatcherMethod_value)
	proto1.RegisterEnum("proto.Task_DnsType", Task_DnsType_name, Task_DnsType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MasterWorker service

type MasterWorkerClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (MasterWorker_SubscribeClient, error)
}

type masterWorkerClient struct {
	cc *grpc.ClientConn
}

func NewMasterWorkerClient(cc *grpc.ClientConn) MasterWorkerClient {
	return &masterWorkerClient{cc}
}

func (c *masterWorkerClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (MasterWorker_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MasterWorker_serviceDesc.Streams[0], c.cc, "/proto.MasterWorker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterWorkerSubscribeClient{stream}
	return x, nil
}

type MasterWorker_SubscribeClient interface {
	Send(*Topic) error
	Recv() (*TaskInfo, error)
	grpc.ClientStream
}

type masterWorkerSubscribeClient struct {
	grpc.ClientStream
}

func (x *masterWorkerSubscribeClient) Send(m *Topic) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterWorkerSubscribeClient) Recv() (*TaskInfo, error) {
	m := new(TaskInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MasterWorker service

type MasterWorkerServer interface {
	Subscribe(MasterWorker_SubscribeServer) error
}

func RegisterMasterWorkerServer(s *grpc.Server, srv MasterWorkerServer) {
	s.RegisterService(&_MasterWorker_serviceDesc, srv)
}

func _MasterWorker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterWorkerServer).Subscribe(&masterWorkerSubscribeServer{stream})
}

type MasterWorker_SubscribeServer interface {
	Send(*TaskInfo) error
	Recv() (*Topic, error)
	grpc.ServerStream
}

type masterWorkerSubscribeServer struct {
	grpc.ServerStream
}

func (x *masterWorkerSubscribeServer) Send(m *TaskInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterWorkerSubscribeServer) Recv() (*Topic, error) {
	m := new(Topic)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MasterWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MasterWorker",
	HandlerType: (*MasterWorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MasterWorker_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "master_worker.proto",
}

func init() { proto1.RegisterFile("master_worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x0e, 0x25, 0xfe, 0x8e, 0xfc, 0xc3, 0x6c, 0x7c, 0x12, 0x1d, 0xc1, 0x38, 0x47, 0x20, 0x4e,
	0x0e, 0xdc, 0x00, 0x71, 0x03, 0x27, 0x40, 0x7e, 0x50, 0xa0, 0x55, 0x44, 0x22, 0x12, 0x1a, 0x49,
	0xee, 0x8a, 0x6a, 0x92, 0x8b, 0x82, 0xa0, 0xc9, 0x8d, 0x4d, 0x58, 0x26, 0x09, 0xee, 0x32, 0xae,
	0x9f, 0xa1, 0xef, 0xd1, 0xe7, 0xe9, 0x6d, 0x2f, 0x7a, 0x53, 0xa0, 0xef, 0x51, 0xec, 0x2e, 0x49,
	0xd1, 0x76, 0xd3, 0xde, 0x90, 0x3b, 0x33, 0xdf, 0xec, 0xee, 0xcc, 0x7e, 0x3b, 0xb3, 0x70, 0xef,
	0x22, 0xa4, 0x8c, 0x14, 0xc1, 0x65, 0x56, 0x9c, 0x93, 0xe2, 0x30, 0x2f, 0x32, 0x96, 0x21, 0x4d,
	0xfc, 0x9c, 0x5f, 0x14, 0xd0, 0xfc, 0x2c, 0x4f, 0x22, 0xf4, 0x10, 0x54, 0xff, 0x2a, 0x27, 0x7d,
	0x65, 0xa8, 0x1c, 0xec, 0x1c, 0xdd, 0x95, 0xb0, 0x43, 0x61, 0x3b, 0x64, 0x57, 0x39, 0xc1, 0x2a,
	0xff, 0xa2, 0x01, 0x98, 0xef, 0xc4, 0x3c, 0xd3, 0xb8, 0xdf, 0x19, 0x2a, 0x07, 0x16, 0x36, 0x2f,
	0x2b, 0x19, 0xfd, 0x07, 0x40, 0xda, 0xfc, 0xe4, 0x82, 0xf4, 0xbb, 0x43, 0xe5, 0xa0, 0x8b, 0xe1,
	0xb2, 0xd1, 0xa0, 0x2f, 0x40, 0x2f, 0x08, 0x2d, 0xd7, 0xac, 0xaf, 0x0e, 0x95, 0x83, 0x5e, 0xb3,
	0x08, 0x0b, 0xe9, 0x39, 0x16, 0x06, 0x5c, 0x01, 0x9c, 0x97, 0x20, 0x97, 0xd3, 0x40, 0x09, 0xec,
	0x3b, 0xa8, 0x07, 0xc6, 0x78, 0x31, 0x9f, 0x7b, 0x63, 0xdf, 0x56, 0x10, 0x80, 0x8e, 0xbd, 0xe5,
	0xea, 0xad, 0x6f, 0x77, 0xd0, 0x5d, 0xd8, 0x9e, 0x78, 0xa3, 0xb7, 0xfe, 0x24, 0xc0, 0xde, 0xf1,
	0x02, 0xfb, 0x76, 0xd7, 0xf9, 0x59, 0x05, 0xd3, 0x0f, 0xe9, 0xf9, 0x34, 0xfd, 0x98, 0xa1, 0xfb,
	0xa0, 0x8b, 0x71, 0x2c, 0xe2, 0xb2, 0xb0, 0xce, 0x84, 0x84, 0x0e, 0xaa, 0x68, 0x3b, 0x22, 0xda,
	0xbd, 0x3a, 0xda, 0xca, 0xad, 0x1d, 0x70, 0x1f, 0x8c, 0xef, 0x49, 0x41, 0x93, 0x2c, 0x15, 0x11,
	0x59, 0xd8, 0xf8, 0x24, 0x45, 0x1e, 0xee, 0xb8, 0x20, 0x21, 0x23, 0x22, 0x5c, 0x55, 0x86, 0x1b,
	0x35, 0x1a, 0x6e, 0x5f, 0xe5, 0x71, 0x6d, 0xd7, 0xa4, 0xbd, 0x6c, 0x34, 0x68, 0x08, 0x3d, 0xef,
	0x47, 0x12, 0x95, 0x15, 0x40, 0x17, 0x80, 0x1e, 0xd9, 0xa8, 0x90, 0x03, 0x5b, 0xcb, 0xe8, 0x8c,
	0xc4, 0xe5, 0x5a, 0x42, 0x0c, 0x01, 0xd9, 0xa2, 0x2d, 0x1d, 0xda, 0x07, 0xeb, 0x98, 0x14, 0x49,
	0x16, 0x2f, 0x49, 0xd4, 0x37, 0x87, 0xca, 0xc1, 0x36, 0xb6, 0xf2, 0x5a, 0x81, 0x1e, 0x83, 0x35,
	0x61, 0x2c, 0x0f, 0x96, 0x39, 0x89, 0xfa, 0x96, 0xc8, 0xba, 0xdd, 0x0a, 0x36, 0xe0, 0x46, 0x6c,
	0x9e, 0x31, 0x96, 0x73, 0x04, 0x7a, 0x04, 0xa6, 0x9b, 0x52, 0x89, 0x06, 0x81, 0xde, 0x6d, 0xa3,
	0xdd, 0x94, 0x62, 0x23, 0x4e, 0xa9, 0xc0, 0x3e, 0x06, 0xeb, 0x38, 0x49, 0x4f, 0x25, 0xb8, 0x77,
	0x7b, 0x6a, 0x6e, 0xc4, 0x66, 0x9e, 0xa4, 0xa7, 0x02, 0xfe, 0x35, 0xec, 0xfa, 0x45, 0x18, 0x91,
	0x22, 0x2b, 0x19, 0x91, 0x4e, 0x5b, 0xc2, 0xe9, 0x7e, 0xdb, 0x69, 0x03, 0xc1, 0x3b, 0xac, 0x19,
	0x73, 0xb4, 0xb3, 0xb8, 0x4e, 0x09, 0x04, 0x3b, 0xab, 0x79, 0x75, 0xf6, 0xe3, 0x89, 0x37, 0xfe,
	0xd6, 0x56, 0x90, 0x09, 0xea, 0xc4, 0xf7, 0x8f, 0xed, 0x0e, 0x32, 0xa0, 0xeb, 0xce, 0x97, 0x76,
	0x97, 0xab, 0x8e, 0xa7, 0xf3, 0x37, 0xb6, 0x8a, 0x76, 0xa1, 0xe7, 0xe3, 0xd1, 0xd8, 0x0b, 0xf0,
	0x62, 0xe5, 0x7b, 0xb6, 0xe6, 0xfc, 0xa1, 0x02, 0x6c, 0xa8, 0xf7, 0x59, 0xaa, 0xf4, 0xc1, 0x58,
	0x96, 0x51, 0x44, 0x28, 0x15, 0x6c, 0x31, 0xb1, 0x41, 0xa5, 0x88, 0x9e, 0x81, 0xe5, 0x15, 0x45,
	0x56, 0x8c, 0xb3, 0x58, 0xd2, 0x7d, 0xa7, 0x09, 0x66, 0x33, 0xef, 0x61, 0x94, 0xc5, 0x04, 0x5b,
	0xa4, 0x06, 0xa2, 0x3d, 0xd0, 0x84, 0x97, 0x60, 0x8c, 0x85, 0x35, 0x61, 0xe1, 0xab, 0xb8, 0x64,
	0x1d, 0x5e, 0xcd, 0x68, 0xc5, 0x14, 0x23, 0x96, 0xa2, 0x58, 0x9f, 0x85, 0x05, 0x9b, 0xd1, 0x8a,
	0x22, 0x06, 0x95, 0x22, 0x7a, 0x04, 0x2a, 0x4f, 0xb2, 0xa0, 0x45, 0xef, 0xaf, 0x96, 0xe6, 0xc9,
	0xc7, 0x2a, 0xff, 0xa2, 0xaf, 0x00, 0x36, 0xb9, 0x15, 0x3c, 0xe9, 0x1d, 0xed, 0xdf, 0xf6, 0xd8,
	0xe4, 0x1c, 0xc3, 0x66, 0x3c, 0x18, 0x80, 0x9c, 0x05, 0x81, 0xba, 0xce, 0x28, 0x13, 0x19, 0xda,
	0xc6, 0x62, 0x3c, 0x78, 0x05, 0x2d, 0x24, 0x47, 0x4c, 0xb2, 0x9c, 0x0a, 0x84, 0x86, 0xd5, 0xb3,
	0x2c, 0x17, 0x11, 0x78, 0x45, 0x21, 0xd4, 0x1d, 0xa1, 0x36, 0x88, 0x14, 0x9d, 0xdf, 0x15, 0x50,
	0x79, 0x7e, 0xea, 0x43, 0xd5, 0xa1, 0xb3, 0xe0, 0x07, 0xd9, 0x87, 0x3d, 0x0f, 0xe3, 0x80, 0x1f,
	0x66, 0x30, 0xf7, 0xde, 0x05, 0xd8, 0xfb, 0x6e, 0xe5, 0x2d, 0xf9, 0x85, 0x7f, 0x00, 0xf7, 0x1a,
	0x8b, 0xbb, 0x68, 0x0c, 0x5d, 0x74, 0x1f, 0x50, 0x63, 0xc0, 0xde, 0xc8, 0x0d, 0x5e, 0x2f, 0xdc,
	0x0f, 0xb6, 0x8a, 0x86, 0xb0, 0xdf, 0xe8, 0x97, 0xfe, 0xc8, 0x5f, 0x2d, 0x83, 0xf1, 0xc2, 0xf5,
	0x82, 0xd5, 0x7c, 0x36, 0xf2, 0xc7, 0x13, 0x5b, 0x43, 0xff, 0x86, 0x7f, 0x35, 0x88, 0x09, 0xf7,
	0xac, 0x4d, 0xfa, 0x35, 0x13, 0x9f, 0xaf, 0x31, 0x19, 0x68, 0x0f, 0xec, 0xc6, 0xe4, 0x4f, 0x67,
	0xde, 0x62, 0xe5, 0xdb, 0x26, 0x67, 0x65, 0xa3, 0x5d, 0xf8, 0x13, 0x0f, 0xdb, 0x96, 0xf3, 0xab,
	0x06, 0x56, 0x73, 0xd9, 0x90, 0x0d, 0xdd, 0x55, 0xb1, 0xae, 0x38, 0xd6, 0x2d, 0x8b, 0x35, 0xfa,
	0x12, 0xf4, 0x19, 0x61, 0x67, 0x59, 0x5c, 0x55, 0xa3, 0x07, 0x37, 0x2f, 0xe8, 0xe1, 0x85, 0x30,
	0x63, 0x5d, 0xfe, 0xd1, 0x33, 0xd0, 0xcf, 0x48, 0x18, 0x93, 0xa2, 0xdf, 0x1d, 0x76, 0x5b, 0xe7,
	0xb8, 0x71, 0x98, 0x08, 0xb3, 0x97, 0xb2, 0xe2, 0x0a, 0x57, 0x58, 0x7e, 0x0a, 0xe3, 0x2c, 0x3b,
	0x4f, 0x08, 0xad, 0x98, 0x67, 0x44, 0x52, 0x44, 0x2f, 0xc0, 0x7a, 0x1d, 0xd2, 0x24, 0x1a, 0x95,
	0xec, 0x4c, 0xb0, 0xaf, 0x77, 0x34, 0xb8, 0x35, 0xe5, 0x49, 0x8d, 0xc0, 0x56, 0x33, 0xe4, 0xdd,
	0x60, 0x49, 0x8a, 0x4f, 0xa4, 0x98, 0xe6, 0x82, 0x9c, 0x16, 0x36, 0x69, 0x25, 0xa3, 0x23, 0x30,
	0x66, 0x21, 0x8b, 0xce, 0x48, 0x51, 0x11, 0xb4, 0x7f, 0x3b, 0x2e, 0x69, 0xc7, 0x46, 0x35, 0x18,
	0xfc, 0xd4, 0x81, 0x7a, 0x8c, 0x9e, 0xf3, 0xfb, 0x58, 0x9c, 0x12, 0x56, 0xb5, 0xa4, 0xff, 0x7e,
	0xce, 0xfd, 0x90, 0x09, 0x18, 0xbf, 0xb0, 0xfc, 0xcf, 0x1d, 0xaf, 0xe5, 0xf3, 0xf3, 0x8e, 0x37,
	0xf2, 0x2a, 0x32, 0x94, 0x32, 0x92, 0xb2, 0xba, 0xd4, 0x47, 0x52, 0xe4, 0xa5, 0x7c, 0xc9, 0x42,
	0x56, 0x52, 0x71, 0xd5, 0x55, 0x41, 0x62, 0xa0, 0x8d, 0xc6, 0x79, 0x08, 0xf5, 0xe2, 0x06, 0x74,
	0x83, 0x80, 0x53, 0xd9, 0x04, 0x55, 0x30, 0x50, 0x56, 0x25, 0x6f, 0xe4, 0xda, 0x1d, 0xe7, 0x31,
	0xd4, 0x4b, 0x59, 0xa0, 0x05, 0x81, 0x04, 0xf6, 0xc0, 0x98, 0xce, 0xc7, 0x6f, 0x57, 0xae, 0x67,
	0x2b, 0x5c, 0xf0, 0xde, 0x4b, 0xa1, 0x33, 0x78, 0x0e, 0xad, 0x54, 0x23, 0x50, 0x57, 0x94, 0x14,
	0x15, 0x71, 0xd4, 0x92, 0x92, 0x82, 0x97, 0xac, 0xe3, 0x90, 0xd2, 0xcb, 0xba, 0x15, 0xeb, 0xb9,
	0x90, 0x06, 0x2f, 0xa1, 0xd7, 0x62, 0x00, 0xa7, 0xdc, 0x39, 0xb9, 0xaa, 0x29, 0x77, 0x4e, 0xae,
	0x78, 0x0d, 0xfa, 0x14, 0xae, 0x4b, 0x52, 0xf9, 0x49, 0xe1, 0x55, 0xe7, 0x85, 0xd2, 0xda, 0xa2,
	0x0e, 0x1d, 0xb1, 0x3f, 0x03, 0xba, 0x6f, 0x3c, 0x5f, 0xc6, 0x71, 0xbc, 0x10, 0x97, 0xb0, 0x8e,
	0xa8, 0xeb, 0xfc, 0xd6, 0x91, 0xcd, 0x96, 0xb7, 0x06, 0xbe, 0x1d, 0x37, 0xbb, 0x08, 0x93, 0xb4,
	0xae, 0xa0, 0xb1, 0x90, 0xfe, 0xa6, 0xd9, 0x72, 0xb7, 0x76, 0xb3, 0xdd, 0x07, 0x6b, 0xfa, 0x51,
	0xb0, 0x66, 0x9a, 0x8b, 0x33, 0x30, 0xb1, 0x95, 0xd4, 0x0a, 0xce, 0xb6, 0x6a, 0xc8, 0x29, 0xdc,
	0xe5, 0x6c, 0xbb, 0xa8, 0x64, 0xf4, 0x3f, 0xd8, 0xae, 0x3c, 0xab, 0x2d, 0x68, 0xc2, 0x7b, 0x3b,
	0x69, 0x2b, 0x79, 0x43, 0x6d, 0x89, 0xbc, 0xa0, 0xf2, 0x59, 0xb6, 0x2e, 0x5a, 0x3a, 0xf4, 0x7f,
	0xd8, 0x91, 0x9c, 0x76, 0x09, 0x4d, 0x4e, 0x53, 0x12, 0x0b, 0xfa, 0x9a, 0x78, 0x87, 0x5e, 0xd3,
	0xf2, 0xbd, 0xba, 0xf3, 0xa5, 0x84, 0x8a, 0x82, 0x6a, 0x61, 0x2b, 0xae, 0x15, 0x8e, 0x57, 0x75,
	0xab, 0xd6, 0x41, 0x6b, 0xa0, 0x8c, 0x6c, 0x85, 0xe7, 0x75, 0xf6, 0xde, 0xee, 0xf0, 0xbf, 0xe8,
	0x50, 0x16, 0x68, 0xe3, 0xf9, 0x68, 0xe6, 0xd9, 0x2a, 0x4f, 0xb5, 0xff, 0xde, 0xb7, 0x35, 0x3e,
	0x18, 0xcd, 0x3f, 0xd8, 0xba, 0xf3, 0x43, 0x55, 0x3a, 0x78, 0x9d, 0xe7, 0x0f, 0x06, 0x97, 0x50,
	0x96, 0xa4, 0x21, 0xe3, 0xcf, 0x11, 0x99, 0xe4, 0x5e, 0xbc, 0x51, 0xf1, 0x73, 0x1d, 0x67, 0x65,
	0xca, 0xaa, 0x3a, 0xab, 0x45, 0x5c, 0xe0, 0xbc, 0xe6, 0x4f, 0x85, 0xac, 0x94, 0xbc, 0xd6, 0xb0,
	0xc1, 0xa4, 0xe8, 0x3c, 0x85, 0xdd, 0x1b, 0x6d, 0xf7, 0x9f, 0x17, 0x39, 0xfa, 0x86, 0x27, 0x91,
	0xbf, 0x28, 0xe5, 0x63, 0x0f, 0x3d, 0x01, 0x6b, 0x59, 0x9e, 0xd0, 0xa8, 0x48, 0x4e, 0x08, 0xda,
	0x6a, 0x3f, 0x1c, 0x07, 0xbb, 0x37, 0x1e, 0x56, 0xce, 0x9d, 0x03, 0xe5, 0x89, 0x72, 0xa2, 0x0b,
	0xed, 0xd3, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x6e, 0x02, 0xa5, 0x9a, 0x0a, 0x00, 0x00,
}
