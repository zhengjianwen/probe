// Code generated by protoc-gen-go. DO NOT EDIT.
// source: master_worker.proto

/*
Package master_worker is a generated protocol buffer package.

It is generated from these files:
	master_worker.proto

It has these top-level messages:
	Topic
	Task
	BasicInfo
	TaskResult
	HttpSpec
	DnsSpec
	PingSpec
	TraceRouteSpec
	TcpSpec
	UdpSpec
	FtpSpec
*/
package master_worker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskType int32

const (
	TaskType__              TaskType = 0
	TaskType_UNHEALTH_CHECK TaskType = 1
	TaskType_HTTP           TaskType = 2
	TaskType_DNS            TaskType = 3
	TaskType_PING           TaskType = 4
	TaskType_TRACE_ROUTE    TaskType = 5
	TaskType_TCP            TaskType = 6
	TaskType_UDP            TaskType = 7
	TaskType_FTP            TaskType = 8
)

var TaskType_name = map[int32]string{
	0: "_",
	1: "UNHEALTH_CHECK",
	2: "HTTP",
	3: "DNS",
	4: "PING",
	5: "TRACE_ROUTE",
	6: "TCP",
	7: "UDP",
	8: "FTP",
}
var TaskType_value = map[string]int32{
	"_":              0,
	"UNHEALTH_CHECK": 1,
	"HTTP":           2,
	"DNS":            3,
	"PING":           4,
	"TRACE_ROUTE":    5,
	"TCP":            6,
	"UDP":            7,
	"FTP":            8,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TopicType int32

const (
	Topic__             TopicType = 0
	Topic_CONNECT       TopicType = 1
	Topic_RESULT        TopicType = 2
	Topic_HEALTH_REPORT TopicType = 3
)

var TopicType_name = map[int32]string{
	0: "_",
	1: "CONNECT",
	2: "RESULT",
	3: "HEALTH_REPORT",
}
var TopicType_value = map[string]int32{
	"_":             0,
	"CONNECT":       1,
	"RESULT":        2,
	"HEALTH_REPORT": 3,
}

func (x TopicType) String() string {
	return proto.EnumName(TopicType_name, int32(x))
}
func (TopicType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type TaskResultCode int32

const (
	TaskResult__                            TaskResultCode = 0
	TaskResult_OK                           TaskResultCode = 1
	TaskResult_ERR_HTTP_NEW_REQUEST         TaskResultCode = 2
	TaskResult_ERR_HTTP_DO_REQUEST          TaskResultCode = 3
	TaskResult_ERR_HTTP_READ_BODY           TaskResultCode = 4
	TaskResult_ERR_HTTP_STATUS_CODE_UNMATCH TaskResultCode = 5
	TaskResult_ERR_HTTP_HEAD_UNMATCH        TaskResultCode = 6
	TaskResult_ERR_HTTP_BODY_UNMATCH        TaskResultCode = 7
	TaskResult_ERR_HTTP_TIMEOUT             TaskResultCode = 8
	TaskResult_ERR_HTTP_OTHER               TaskResultCode = 9
	TaskResult_ERR_NET_DIAL                 TaskResultCode = 10
	TaskResult_ERR_UDP_REQUEST              TaskResultCode = 11
	TaskResult_ERR_UDP_RESPONSE             TaskResultCode = 12
	TaskResult_ERR_UDP_RESPONSE_UNMATCH     TaskResultCode = 13
	TaskResult_ERR_FTP_UNAUTHORIZED         TaskResultCode = 14
)

var TaskResultCode_name = map[int32]string{
	0:  "_",
	1:  "OK",
	2:  "ERR_HTTP_NEW_REQUEST",
	3:  "ERR_HTTP_DO_REQUEST",
	4:  "ERR_HTTP_READ_BODY",
	5:  "ERR_HTTP_STATUS_CODE_UNMATCH",
	6:  "ERR_HTTP_HEAD_UNMATCH",
	7:  "ERR_HTTP_BODY_UNMATCH",
	8:  "ERR_HTTP_TIMEOUT",
	9:  "ERR_HTTP_OTHER",
	10: "ERR_NET_DIAL",
	11: "ERR_UDP_REQUEST",
	12: "ERR_UDP_RESPONSE",
	13: "ERR_UDP_RESPONSE_UNMATCH",
	14: "ERR_FTP_UNAUTHORIZED",
}
var TaskResultCode_value = map[string]int32{
	"_":  0,
	"OK": 1,
	"ERR_HTTP_NEW_REQUEST":         2,
	"ERR_HTTP_DO_REQUEST":          3,
	"ERR_HTTP_READ_BODY":           4,
	"ERR_HTTP_STATUS_CODE_UNMATCH": 5,
	"ERR_HTTP_HEAD_UNMATCH":        6,
	"ERR_HTTP_BODY_UNMATCH":        7,
	"ERR_HTTP_TIMEOUT":             8,
	"ERR_HTTP_OTHER":               9,
	"ERR_NET_DIAL":                 10,
	"ERR_UDP_REQUEST":              11,
	"ERR_UDP_RESPONSE":             12,
	"ERR_UDP_RESPONSE_UNMATCH":     13,
	"ERR_FTP_UNAUTHORIZED":         14,
}

func (x TaskResultCode) String() string {
	return proto.EnumName(TaskResultCode_name, int32(x))
}
func (TaskResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type HttpSpecMethod int32

const (
	HttpSpec___   HttpSpecMethod = 0
	HttpSpec_GET  HttpSpecMethod = 1
	HttpSpec_POST HttpSpecMethod = 2
	HttpSpec_HEAD HttpSpecMethod = 3
)

var HttpSpecMethod_name = map[int32]string{
	0: "__",
	1: "GET",
	2: "POST",
	3: "HEAD",
}
var HttpSpecMethod_value = map[string]int32{
	"__":   0,
	"GET":  1,
	"POST": 2,
	"HEAD": 3,
}

func (x HttpSpecMethod) String() string {
	return proto.EnumName(HttpSpecMethod_name, int32(x))
}
func (HttpSpecMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type HttpSpecMatcherTarget int32

const (
	HttpSpecMatcher____  HttpSpecMatcherTarget = 0
	HttpSpecMatcher_BODY HttpSpecMatcherTarget = 1
	HttpSpecMatcher_HEAD HttpSpecMatcherTarget = 2
)

var HttpSpecMatcherTarget_name = map[int32]string{
	0: "___",
	1: "BODY",
	2: "HEAD",
}
var HttpSpecMatcherTarget_value = map[string]int32{
	"___":  0,
	"BODY": 1,
	"HEAD": 2,
}

func (x HttpSpecMatcherTarget) String() string {
	return proto.EnumName(HttpSpecMatcherTarget_name, int32(x))
}
func (HttpSpecMatcherTarget) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0, 0} }

type HttpSpecMatcherMethod int32

const (
	HttpSpecMatcher______   HttpSpecMatcherMethod = 0
	HttpSpecMatcher_INCLUDE HttpSpecMatcherMethod = 1
	HttpSpecMatcher_EXCLUDE HttpSpecMatcherMethod = 2
)

var HttpSpecMatcherMethod_name = map[int32]string{
	0: "_____",
	1: "INCLUDE",
	2: "EXCLUDE",
}
var HttpSpecMatcherMethod_value = map[string]int32{
	"_____":   0,
	"INCLUDE": 1,
	"EXCLUDE": 2,
}

func (x HttpSpecMatcherMethod) String() string {
	return proto.EnumName(HttpSpecMatcherMethod_name, int32(x))
}
func (HttpSpecMatcherMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0, 1} }

type DnsSpecType int32

const (
	DnsSpec______ DnsSpecType = 0
	DnsSpec_A     DnsSpecType = 1
	DnsSpec_MX    DnsSpecType = 2
	DnsSpec_NS    DnsSpecType = 3
	DnsSpec_CNAME DnsSpecType = 4
	DnsSpec_TXT   DnsSpecType = 5
	DnsSpec_ANY   DnsSpecType = 6
)

var DnsSpecType_name = map[int32]string{
	0: "_____",
	1: "A",
	2: "MX",
	3: "NS",
	4: "CNAME",
	5: "TXT",
	6: "ANY",
}
var DnsSpecType_value = map[string]int32{
	"_____": 0,
	"A":     1,
	"MX":    2,
	"NS":    3,
	"CNAME": 4,
	"TXT":   5,
	"ANY":   6,
}

func (x DnsSpecType) String() string {
	return proto.EnumName(DnsSpecType_name, int32(x))
}
func (DnsSpecType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type UdpSpecFormat int32

const (
	UdpSpec__      UdpSpecFormat = 0
	UdpSpec_BINARY UdpSpecFormat = 1
	UdpSpec_TEXT   UdpSpecFormat = 2
)

var UdpSpecFormat_name = map[int32]string{
	0: "_",
	1: "BINARY",
	2: "TEXT",
}
var UdpSpecFormat_value = map[string]int32{
	"_":      0,
	"BINARY": 1,
	"TEXT":   2,
}

func (x UdpSpecFormat) String() string {
	return proto.EnumName(UdpSpecFormat_name, int32(x))
}
func (UdpSpecFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type Topic struct {
	Type       TopicType   `protobuf:"varint,1,opt,name=Type,json=type,enum=TopicType" json:"Type,omitempty"`
	WorkerId   int64       `protobuf:"varint,2,opt,name=WorkerId,json=workerId" json:"WorkerId,omitempty"`
	WorkerTime int64       `protobuf:"varint,3,opt,name=WorkerTime,json=workerTime" json:"WorkerTime,omitempty"`
	Result     *TaskResult `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Topic) GetType() TopicType {
	if m != nil {
		return m.Type
	}
	return Topic__
}

func (m *Topic) GetWorkerId() int64 {
	if m != nil {
		return m.WorkerId
	}
	return 0
}

func (m *Topic) GetWorkerTime() int64 {
	if m != nil {
		return m.WorkerTime
	}
	return 0
}

func (m *Topic) GetResult() *TaskResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type Task struct {
	BasicInfo      *BasicInfo      `protobuf:"bytes,1,opt,name=BasicInfo,json=basicInfo" json:"BasicInfo,omitempty"`
	HttpSpec       *HttpSpec       `protobuf:"bytes,2,opt,name=HttpSpec,json=httpSpec" json:"HttpSpec,omitempty"`
	DnsSpec        *DnsSpec        `protobuf:"bytes,3,opt,name=DnsSpec,json=dnsSpec" json:"DnsSpec,omitempty"`
	PingSpec       *PingSpec       `protobuf:"bytes,4,opt,name=PingSpec,json=pingSpec" json:"PingSpec,omitempty"`
	TracerouteSpec *TraceRouteSpec `protobuf:"bytes,5,opt,name=TracerouteSpec,json=tracerouteSpec" json:"TracerouteSpec,omitempty"`
	TcpSpec        *TcpSpec        `protobuf:"bytes,6,opt,name=TcpSpec,json=tcpSpec" json:"TcpSpec,omitempty"`
	UdpSpec        *UdpSpec        `protobuf:"bytes,7,opt,name=UdpSpec,json=udpSpec" json:"UdpSpec,omitempty"`
	FtpSpec        *FtpSpec        `protobuf:"bytes,8,opt,name=FtpSpec,json=ftpSpec" json:"FtpSpec,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Task) GetBasicInfo() *BasicInfo {
	if m != nil {
		return m.BasicInfo
	}
	return nil
}

func (m *Task) GetHttpSpec() *HttpSpec {
	if m != nil {
		return m.HttpSpec
	}
	return nil
}

func (m *Task) GetDnsSpec() *DnsSpec {
	if m != nil {
		return m.DnsSpec
	}
	return nil
}

func (m *Task) GetPingSpec() *PingSpec {
	if m != nil {
		return m.PingSpec
	}
	return nil
}

func (m *Task) GetTracerouteSpec() *TraceRouteSpec {
	if m != nil {
		return m.TracerouteSpec
	}
	return nil
}

func (m *Task) GetTcpSpec() *TcpSpec {
	if m != nil {
		return m.TcpSpec
	}
	return nil
}

func (m *Task) GetUdpSpec() *UdpSpec {
	if m != nil {
		return m.UdpSpec
	}
	return nil
}

func (m *Task) GetFtpSpec() *FtpSpec {
	if m != nil {
		return m.FtpSpec
	}
	return nil
}

type BasicInfo struct {
	Id           int64    `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Type         TaskType `protobuf:"varint,2,opt,name=Type,json=type,enum=TaskType" json:"Type,omitempty"`
	Version      string   `protobuf:"bytes,3,opt,name=Version,json=version" json:"Version,omitempty"`
	CreateTime   int64    `protobuf:"varint,4,opt,name=CreateTime,json=createTime" json:"CreateTime,omitempty"`
	UpdateTime   int64    `protobuf:"varint,5,opt,name=UpdateTime,json=updateTime" json:"UpdateTime,omitempty"`
	ExecuteTime  int64    `protobuf:"varint,6,opt,name=ExecuteTime,json=executeTime" json:"ExecuteTime,omitempty"`
	ScheduleTime int64    `protobuf:"varint,7,opt,name=ScheduleTime,json=scheduleTime" json:"ScheduleTime,omitempty"`
	PeriodSec    int64    `protobuf:"varint,8,opt,name=PeriodSec,json=periodSec" json:"PeriodSec,omitempty"`
}

func (m *BasicInfo) Reset()                    { *m = BasicInfo{} }
func (m *BasicInfo) String() string            { return proto.CompactTextString(m) }
func (*BasicInfo) ProtoMessage()               {}
func (*BasicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BasicInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BasicInfo) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType__
}

func (m *BasicInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BasicInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *BasicInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *BasicInfo) GetExecuteTime() int64 {
	if m != nil {
		return m.ExecuteTime
	}
	return 0
}

func (m *BasicInfo) GetScheduleTime() int64 {
	if m != nil {
		return m.ScheduleTime
	}
	return 0
}

func (m *BasicInfo) GetPeriodSec() int64 {
	if m != nil {
		return m.PeriodSec
	}
	return 0
}

type TaskResult struct {
	TaskId       int64                 `protobuf:"varint,1,opt,name=TaskId,json=taskId" json:"TaskId,omitempty"`
	Type         TaskType              `protobuf:"varint,2,opt,name=Type,json=type,enum=TaskType" json:"Type,omitempty"`
	Success      bool                  `protobuf:"varint,3,opt,name=Success,json=success" json:"Success,omitempty"`
	ErrorCode    TaskResultCode        `protobuf:"varint,4,opt,name=ErrorCode,json=errorCode,enum=TaskResultCode" json:"ErrorCode,omitempty"`
	Error        string                `protobuf:"bytes,5,opt,name=Error,json=error" json:"Error,omitempty"`
	ScheduleTime int64                 `protobuf:"varint,6,opt,name=ScheduleTime,json=scheduleTime" json:"ScheduleTime,omitempty"`
	StartMs      int64                 `protobuf:"varint,7,opt,name=StartMs,json=startMs" json:"StartMs,omitempty"`
	DelayMs      int64                 `protobuf:"varint,8,opt,name=DelayMs,json=delayMs" json:"DelayMs,omitempty"`
	Ping         *TaskResultPing       `protobuf:"bytes,9,opt,name=Ping,json=ping" json:"Ping,omitempty" xorm:"extends"`
	Traceroute   *TaskResultTraceroute `protobuf:"bytes,10,opt,name=Traceroute,json=traceroute" json:"Traceroute,omitempty" xorm:"extends"`
}

func (m *TaskResult) Reset()                    { *m = TaskResult{} }
func (m *TaskResult) String() string            { return proto.CompactTextString(m) }
func (*TaskResult) ProtoMessage()               {}
func (*TaskResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskResult) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskResult) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType__
}

func (m *TaskResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TaskResult) GetErrorCode() TaskResultCode {
	if m != nil {
		return m.ErrorCode
	}
	return TaskResult__
}

func (m *TaskResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TaskResult) GetScheduleTime() int64 {
	if m != nil {
		return m.ScheduleTime
	}
	return 0
}

func (m *TaskResult) GetStartMs() int64 {
	if m != nil {
		return m.StartMs
	}
	return 0
}

func (m *TaskResult) GetDelayMs() int64 {
	if m != nil {
		return m.DelayMs
	}
	return 0
}

func (m *TaskResult) GetPing() *TaskResultPing {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *TaskResult) GetTraceroute() *TaskResultTraceroute {
	if m != nil {
		return m.Traceroute
	}
	return nil
}

type TaskResultPing struct {
	Lost uint32 `protobuf:"varint,1,opt,name=lost" json:"lost,omitempty"`
}

func (m *TaskResultPing) Reset()                    { *m = TaskResultPing{} }
func (m *TaskResultPing) String() string            { return proto.CompactTextString(m) }
func (*TaskResultPing) ProtoMessage()               {}
func (*TaskResultPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *TaskResultPing) GetLost() uint32 {
	if m != nil {
		return m.Lost
	}
	return 0
}

type TaskResultTraceroute struct {
	Hops    int32 `protobuf:"varint,1,opt,name=Hops,json=hops" json:"Hops,omitempty"`
	ErrHops int32 `protobuf:"varint,2,opt,name=ErrHops,json=errHops" json:"ErrHops,omitempty"`
}

func (m *TaskResultTraceroute) Reset()                    { *m = TaskResultTraceroute{} }
func (m *TaskResultTraceroute) String() string            { return proto.CompactTextString(m) }
func (*TaskResultTraceroute) ProtoMessage()               {}
func (*TaskResultTraceroute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *TaskResultTraceroute) GetHops() int32 {
	if m != nil {
		return m.Hops
	}
	return 0
}

func (m *TaskResultTraceroute) GetErrHops() int32 {
	if m != nil {
		return m.ErrHops
	}
	return 0
}

type HttpSpec struct {
	Url       string             `protobuf:"bytes,1,opt,name=Url,json=url" json:"Url,omitempty"`
	Method    HttpSpecMethod     `protobuf:"varint,2,opt,name=Method,json=method,enum=HttpSpecMethod" json:"Method,omitempty"`
	Header    map[string]string  `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cookies   string             `protobuf:"bytes,4,opt,name=Cookies,json=cookies" json:"Cookies,omitempty"`
	BasicAuth *HttpSpecBasicAuth `protobuf:"bytes,5,opt,name=BasicAuth,json=basicAuth" json:"BasicAuth,omitempty" xorm:"json"`
	ServerIp  string             `protobuf:"bytes,6,opt,name=ServerIp,json=serverIp" json:"ServerIp,omitempty"`
	Matcher   *HttpSpecMatcher   `protobuf:"bytes,7,opt,name=Matcher,json=matcher" json:"Matcher,omitempty" xorm:"json"`
}

func (m *HttpSpec) Reset()                    { *m = HttpSpec{} }
func (m *HttpSpec) String() string            { return proto.CompactTextString(m) }
func (*HttpSpec) ProtoMessage()               {}
func (*HttpSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HttpSpec) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HttpSpec) GetMethod() HttpSpecMethod {
	if m != nil {
		return m.Method
	}
	return HttpSpec___
}

func (m *HttpSpec) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HttpSpec) GetCookies() string {
	if m != nil {
		return m.Cookies
	}
	return ""
}

func (m *HttpSpec) GetBasicAuth() *HttpSpecBasicAuth {
	if m != nil {
		return m.BasicAuth
	}
	return nil
}

func (m *HttpSpec) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *HttpSpec) GetMatcher() *HttpSpecMatcher {
	if m != nil {
		return m.Matcher
	}
	return nil
}

type HttpSpecMatcher struct {
	Target     HttpSpecMatcherTarget `protobuf:"varint,1,opt,name=Target,json=target,enum=HttpSpecMatcherTarget" json:"Target,omitempty"`
	Method     HttpSpecMatcherMethod `protobuf:"varint,2,opt,name=Method,json=method,enum=HttpSpecMatcherMethod" json:"Method,omitempty"`
	Content    string                `protobuf:"bytes,3,opt,name=Content,json=content" json:"Content,omitempty"`
	StatusCode int32                 `protobuf:"varint,4,opt,name=StatusCode,json=statusCode" json:"StatusCode,omitempty"`
}

func (m *HttpSpecMatcher) Reset()                    { *m = HttpSpecMatcher{} }
func (m *HttpSpecMatcher) String() string            { return proto.CompactTextString(m) }
func (*HttpSpecMatcher) ProtoMessage()               {}
func (*HttpSpecMatcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *HttpSpecMatcher) GetTarget() HttpSpecMatcherTarget {
	if m != nil {
		return m.Target
	}
	return HttpSpecMatcher____
}

func (m *HttpSpecMatcher) GetMethod() HttpSpecMatcherMethod {
	if m != nil {
		return m.Method
	}
	return HttpSpecMatcher______
}

func (m *HttpSpecMatcher) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *HttpSpecMatcher) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

type HttpSpecBasicAuth struct {
	User   string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=Passwd,json=passwd" json:"Passwd,omitempty"`
}

func (m *HttpSpecBasicAuth) Reset()                    { *m = HttpSpecBasicAuth{} }
func (m *HttpSpecBasicAuth) String() string            { return proto.CompactTextString(m) }
func (*HttpSpecBasicAuth) ProtoMessage()               {}
func (*HttpSpecBasicAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

func (m *HttpSpecBasicAuth) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *HttpSpecBasicAuth) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type DnsSpec struct {
	Domain         string      `protobuf:"bytes,1,opt,name=Domain,json=domain" json:"Domain,omitempty"`
	Type           DnsSpecType `protobuf:"varint,2,opt,name=Type,json=type,enum=DnsSpecType" json:"Type,omitempty" xorm:"query_type"`
	IfMatchIp      bool        `protobuf:"varint,3,opt,name=IfMatchIp,json=ifMatchIp" json:"IfMatchIp,omitempty"`
	MatchIps       []string    `protobuf:"bytes,4,rep,name=MatchIps,json=matchIps" json:"MatchIps,omitempty"`
	IfMatchDomain  bool        `protobuf:"varint,5,opt,name=IfMatchDomain,json=ifMatchDomain" json:"IfMatchDomain,omitempty"`
	MatchDomains   []string    `protobuf:"bytes,6,rep,name=MatchDomains,json=matchDomains" json:"MatchDomains,omitempty"`
	ServerDesigned bool        `protobuf:"varint,7,opt,name=ServerDesigned,json=serverDesigned" json:"ServerDesigned,omitempty"`
	DNSServer      string      `protobuf:"bytes,8,opt,name=DNSServer,json=dNSServer" json:"DNSServer,omitempty"`
}

func (m *DnsSpec) Reset()                    { *m = DnsSpec{} }
func (m *DnsSpec) String() string            { return proto.CompactTextString(m) }
func (*DnsSpec) ProtoMessage()               {}
func (*DnsSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DnsSpec) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DnsSpec) GetType() DnsSpecType {
	if m != nil {
		return m.Type
	}
	return DnsSpec______
}

func (m *DnsSpec) GetIfMatchIp() bool {
	if m != nil {
		return m.IfMatchIp
	}
	return false
}

func (m *DnsSpec) GetMatchIps() []string {
	if m != nil {
		return m.MatchIps
	}
	return nil
}

func (m *DnsSpec) GetIfMatchDomain() bool {
	if m != nil {
		return m.IfMatchDomain
	}
	return false
}

func (m *DnsSpec) GetMatchDomains() []string {
	if m != nil {
		return m.MatchDomains
	}
	return nil
}

func (m *DnsSpec) GetServerDesigned() bool {
	if m != nil {
		return m.ServerDesigned
	}
	return false
}

func (m *DnsSpec) GetDNSServer() string {
	if m != nil {
		return m.DNSServer
	}
	return ""
}

type PingSpec struct {
	Destination string `protobuf:"bytes,1,opt,name=Destination,json=destination" json:"Destination,omitempty"`
	Count       int32  `protobuf:"varint,2,opt,name=Count,json=count" json:"Count,omitempty"`
	Timeout     int32  `protobuf:"varint,3,opt,name=Timeout,json=timeout" json:"Timeout,omitempty"`
}

func (m *PingSpec) Reset()                    { *m = PingSpec{} }
func (m *PingSpec) String() string            { return proto.CompactTextString(m) }
func (*PingSpec) ProtoMessage()               {}
func (*PingSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PingSpec) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *PingSpec) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PingSpec) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type TraceRouteSpec struct {
	Destination string `protobuf:"bytes,1,opt,name=Destination,json=destination" json:"Destination,omitempty"`
}

func (m *TraceRouteSpec) Reset()                    { *m = TraceRouteSpec{} }
func (m *TraceRouteSpec) String() string            { return proto.CompactTextString(m) }
func (*TraceRouteSpec) ProtoMessage()               {}
func (*TraceRouteSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TraceRouteSpec) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type TcpSpec struct {
	Host string `protobuf:"bytes,1,opt,name=Host,json=host" json:"Host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,json=port" json:"Port,omitempty"`
}

func (m *TcpSpec) Reset()                    { *m = TcpSpec{} }
func (m *TcpSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpSpec) ProtoMessage()               {}
func (*TcpSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TcpSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *TcpSpec) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type UdpSpec struct {
	Host            string        `protobuf:"bytes,1,opt,name=Host,json=host" json:"Host,omitempty"`
	Port            int32         `protobuf:"varint,2,opt,name=Port,json=port" json:"Port,omitempty"`
	ReqFormat       UdpSpecFormat `protobuf:"varint,3,opt,name=ReqFormat,json=reqFormat,enum=UdpSpecFormat" json:"ReqFormat,omitempty"`
	ReqContent      string        `protobuf:"bytes,4,opt,name=ReqContent,json=reqContent" json:"ReqContent,omitempty"`
	ResFormat       UdpSpecFormat `protobuf:"varint,5,opt,name=ResFormat,json=resFormat,enum=UdpSpecFormat" json:"ResFormat,omitempty"`
	ResMatchContent string        `protobuf:"bytes,6,opt,name=ResMatchContent,json=resMatchContent" json:"ResMatchContent,omitempty"`
}

func (m *UdpSpec) Reset()                    { *m = UdpSpec{} }
func (m *UdpSpec) String() string            { return proto.CompactTextString(m) }
func (*UdpSpec) ProtoMessage()               {}
func (*UdpSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UdpSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *UdpSpec) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *UdpSpec) GetReqFormat() UdpSpecFormat {
	if m != nil {
		return m.ReqFormat
	}
	return UdpSpec__
}

func (m *UdpSpec) GetReqContent() string {
	if m != nil {
		return m.ReqContent
	}
	return ""
}

func (m *UdpSpec) GetResFormat() UdpSpecFormat {
	if m != nil {
		return m.ResFormat
	}
	return UdpSpec__
}

func (m *UdpSpec) GetResMatchContent() string {
	if m != nil {
		return m.ResMatchContent
	}
	return ""
}

type FtpSpec struct {
	Host   string       `protobuf:"bytes,1,opt,name=Host,json=host" json:"Host,omitempty"`
	Port   int32        `protobuf:"varint,2,opt,name=Port,json=port" json:"Port,omitempty"`
	IfAuth bool         `protobuf:"varint,3,opt,name=IfAuth,json=ifAuth" json:"IfAuth,omitempty"`
	Auth   *FtpSpecAuth `protobuf:"bytes,4,opt,name=Auth,json=auth" json:"Auth,omitempty"`
}

func (m *FtpSpec) Reset()                    { *m = FtpSpec{} }
func (m *FtpSpec) String() string            { return proto.CompactTextString(m) }
func (*FtpSpec) ProtoMessage()               {}
func (*FtpSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FtpSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *FtpSpec) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *FtpSpec) GetIfAuth() bool {
	if m != nil {
		return m.IfAuth
	}
	return false
}

func (m *FtpSpec) GetAuth() *FtpSpecAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type FtpSpecAuth struct {
	User   string `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=Passwd,json=passwd" json:"Passwd,omitempty"`
}

func (m *FtpSpecAuth) Reset()                    { *m = FtpSpecAuth{} }
func (m *FtpSpecAuth) String() string            { return proto.CompactTextString(m) }
func (*FtpSpecAuth) ProtoMessage()               {}
func (*FtpSpecAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *FtpSpecAuth) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *FtpSpecAuth) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func init() {
	proto.RegisterType((*Topic)(nil), "Topic")
	proto.RegisterType((*Task)(nil), "Task")
	proto.RegisterType((*BasicInfo)(nil), "BasicInfo")
	proto.RegisterType((*TaskResult)(nil), "taskResult")
	proto.RegisterType((*TaskResultPing)(nil), "taskResult.ping")
	proto.RegisterType((*TaskResultTraceroute)(nil), "taskResult.traceroute")
	proto.RegisterType((*HttpSpec)(nil), "HttpSpec")
	proto.RegisterType((*HttpSpecMatcher)(nil), "HttpSpec.matcher")
	proto.RegisterType((*HttpSpecBasicAuth)(nil), "HttpSpec.basicAuth")
	proto.RegisterType((*DnsSpec)(nil), "DnsSpec")
	proto.RegisterType((*PingSpec)(nil), "PingSpec")
	proto.RegisterType((*TraceRouteSpec)(nil), "TraceRouteSpec")
	proto.RegisterType((*TcpSpec)(nil), "TcpSpec")
	proto.RegisterType((*UdpSpec)(nil), "UdpSpec")
	proto.RegisterType((*FtpSpec)(nil), "FtpSpec")
	proto.RegisterType((*FtpSpecAuth)(nil), "FtpSpec.auth")
	proto.RegisterEnum("TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("TopicType", TopicType_name, TopicType_value)
	proto.RegisterEnum("TaskResultCode", TaskResultCode_name, TaskResultCode_value)
	proto.RegisterEnum("HttpSpecMethod", HttpSpecMethod_name, HttpSpecMethod_value)
	proto.RegisterEnum("HttpSpecMatcherTarget", HttpSpecMatcherTarget_name, HttpSpecMatcherTarget_value)
	proto.RegisterEnum("HttpSpecMatcherMethod", HttpSpecMatcherMethod_name, HttpSpecMatcherMethod_value)
	proto.RegisterEnum("DnsSpecType", DnsSpecType_name, DnsSpecType_value)
	proto.RegisterEnum("UdpSpecFormat", UdpSpecFormat_name, UdpSpecFormat_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MasterWorker service

type MasterWorkerClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (MasterWorker_SubscribeClient, error)
}

type masterWorkerClient struct {
	cc *grpc.ClientConn
}

func NewMasterWorkerClient(cc *grpc.ClientConn) MasterWorkerClient {
	return &masterWorkerClient{cc}
}

func (c *masterWorkerClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (MasterWorker_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MasterWorker_serviceDesc.Streams[0], c.cc, "/MasterWorker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterWorkerSubscribeClient{stream}
	return x, nil
}

type MasterWorker_SubscribeClient interface {
	Send(*Topic) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type masterWorkerSubscribeClient struct {
	grpc.ClientStream
}

func (x *masterWorkerSubscribeClient) Send(m *Topic) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterWorkerSubscribeClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MasterWorker service

type MasterWorkerServer interface {
	Subscribe(MasterWorker_SubscribeServer) error
}

func RegisterMasterWorkerServer(s *grpc.Server, srv MasterWorkerServer) {
	s.RegisterService(&_MasterWorker_serviceDesc, srv)
}

func _MasterWorker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterWorkerServer).Subscribe(&masterWorkerSubscribeServer{stream})
}

type MasterWorker_SubscribeServer interface {
	Send(*Task) error
	Recv() (*Topic, error)
	grpc.ServerStream
}

type masterWorkerSubscribeServer struct {
	grpc.ServerStream
}

func (x *masterWorkerSubscribeServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterWorkerSubscribeServer) Recv() (*Topic, error) {
	m := new(Topic)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MasterWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MasterWorker",
	HandlerType: (*MasterWorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MasterWorker_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "master_worker.proto",
}

func init() { proto.RegisterFile("master_worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdd, 0x8e, 0xe3, 0x48,
	0x15, 0x5e, 0x3b, 0xfe, 0x89, 0x4f, 0xba, 0xd3, 0xde, 0x9a, 0xd9, 0x21, 0x44, 0x03, 0x34, 0x66,
	0x17, 0xb5, 0x40, 0x13, 0xcd, 0x06, 0x89, 0x65, 0xf7, 0x2e, 0x93, 0x78, 0x36, 0xd1, 0x4e, 0x27,
	0xa1, 0x52, 0x66, 0x67, 0x11, 0x92, 0xe5, 0xb6, 0xab, 0xa7, 0xa3, 0xee, 0x8e, 0xb3, 0x55, 0xce,
	0x34, 0x7d, 0xc7, 0x3d, 0x2f, 0xc1, 0x13, 0xf0, 0x14, 0x48, 0x3c, 0x01, 0xe2, 0x55, 0xb8, 0x41,
	0x42, 0xa7, 0xaa, 0xec, 0xa4, 0x77, 0x07, 0x31, 0xdc, 0x24, 0xe7, 0x7c, 0xe7, 0xab, 0x72, 0xd5,
	0xf1, 0x57, 0xa7, 0x8e, 0xe1, 0xd1, 0x6d, 0x26, 0x2b, 0x2e, 0xd2, 0xbb, 0x52, 0x5c, 0x73, 0x31,
	0xd8, 0x8a, 0xb2, 0x2a, 0xa3, 0xbf, 0x59, 0xe0, 0xb2, 0x72, 0xbb, 0xce, 0xc9, 0x4f, 0xc0, 0x61,
	0xf7, 0x5b, 0xde, 0xb3, 0x4e, 0xad, 0xb3, 0xee, 0xb0, 0x33, 0x50, 0xe8, 0xa0, 0xba, 0xdf, 0x72,
	0xea, 0xe0, 0x2f, 0xe9, 0x43, 0xfb, 0x6b, 0x35, 0x74, 0x56, 0xf4, 0xec, 0x53, 0xeb, 0xac, 0x45,
	0xdb, 0x77, 0xc6, 0x27, 0x3f, 0x06, 0xd0, 0x31, 0xb6, 0xbe, 0xe5, 0xbd, 0x96, 0x8a, 0xc2, 0x5d,
	0x83, 0x90, 0x9f, 0x81, 0x27, 0xb8, 0xdc, 0xdd, 0x54, 0x3d, 0xe7, 0xd4, 0x3a, 0xeb, 0x0c, 0x3b,
	0x83, 0x2a, 0x93, 0xd7, 0x54, 0x41, 0xd4, 0x84, 0xa2, 0xcf, 0x41, 0x3f, 0xc8, 0x05, 0x2b, 0x0d,
	0x3f, 0x20, 0x1d, 0xf0, 0xc7, 0x8b, 0xf9, 0x3c, 0x1e, 0xb3, 0xd0, 0x22, 0x00, 0x1e, 0x8d, 0x57,
	0xc9, 0x2b, 0x16, 0xda, 0xe4, 0x43, 0x38, 0x9e, 0xc6, 0xa3, 0x57, 0x6c, 0x9a, 0xd2, 0x78, 0xb9,
	0xa0, 0x2c, 0x6c, 0x45, 0x7f, 0xb7, 0xc1, 0x61, 0x99, 0xbc, 0x26, 0x67, 0x10, 0xbc, 0xc8, 0xe4,
	0x3a, 0x9f, 0x6d, 0x2e, 0x4b, 0xb5, 0x95, 0xce, 0x10, 0x06, 0x0d, 0x42, 0x83, 0x8b, 0xda, 0x24,
	0x9f, 0x40, 0x7b, 0x5a, 0x55, 0xdb, 0xd5, 0x96, 0xe7, 0x6a, 0x3b, 0x9d, 0x61, 0x30, 0xa8, 0x01,
	0xda, 0xbe, 0x32, 0x16, 0x89, 0xc0, 0x9f, 0x6c, 0xa4, 0x62, 0xb5, 0x14, 0xab, 0x3d, 0x30, 0x3e,
	0xf5, 0x0b, 0x6d, 0xe0, 0x54, 0xcb, 0xf5, 0xe6, 0x8d, 0x22, 0x39, 0x66, 0xaa, 0x1a, 0xa0, 0xed,
	0xad, 0xb1, 0xc8, 0x67, 0xd0, 0x65, 0x22, 0xcb, 0xb9, 0x28, 0x77, 0x15, 0x57, 0x64, 0x57, 0x91,
	0x4f, 0x06, 0x0a, 0xa6, 0x35, 0x4c, 0xbb, 0xd5, 0x03, 0x1a, 0xae, 0x81, 0xe5, 0x7a, 0xa5, 0x9e,
	0x59, 0x83, 0xf1, 0xa9, 0x5f, 0xe5, 0xcd, 0x3a, 0x93, 0x42, 0x73, 0x7c, 0xc3, 0x31, 0x3e, 0xf5,
	0x77, 0x45, 0xc3, 0x79, 0x69, 0x76, 0xdc, 0x36, 0x1c, 0xe3, 0x53, 0xff, 0x52, 0x1b, 0xd1, 0xbf,
	0xac, 0x83, 0x0c, 0x92, 0x2e, 0xd8, 0xb3, 0x42, 0xe5, 0xb1, 0x45, 0xed, 0x75, 0x41, 0x7e, 0x64,
	0x44, 0x62, 0x2b, 0x91, 0x04, 0x03, 0xcc, 0x39, 0xdb, 0x4b, 0xa4, 0x07, 0xfe, 0xef, 0xb8, 0x90,
	0xeb, 0x72, 0xa3, 0x92, 0x15, 0x50, 0xff, 0xad, 0x76, 0x51, 0x20, 0x63, 0xc1, 0xb3, 0x8a, 0x2b,
	0x81, 0x38, 0x5a, 0x20, 0x79, 0x83, 0x60, 0x3c, 0xd9, 0x16, 0x75, 0xdc, 0xd5, 0xf1, 0x5d, 0x83,
	0x90, 0x53, 0xe8, 0xc4, 0x7f, 0xe4, 0xf9, 0xce, 0x10, 0x3c, 0x45, 0xe8, 0xf0, 0x3d, 0x44, 0x22,
	0x38, 0x5a, 0xe5, 0x57, 0xbc, 0xd8, 0xdd, 0x68, 0x8a, 0xaf, 0x28, 0x47, 0xf2, 0x00, 0x23, 0x4f,
	0x21, 0x58, 0x72, 0xb1, 0x2e, 0x8b, 0x95, 0x49, 0x41, 0x8b, 0x06, 0xdb, 0x1a, 0x88, 0xfe, 0xec,
	0x01, 0xec, 0x65, 0x49, 0x9e, 0x80, 0x87, 0xdb, 0x6b, 0xf6, 0xef, 0x55, 0xca, 0x7b, 0x8f, 0x1c,
	0xac, 0x76, 0x79, 0xce, 0xa5, 0x54, 0x39, 0x68, 0x53, 0x5f, 0x6a, 0x97, 0x0c, 0x20, 0x88, 0x85,
	0x28, 0xc5, 0xb8, 0x2c, 0x74, 0x0a, 0xba, 0xc3, 0xf0, 0xe0, 0x1c, 0x0c, 0xf2, 0xb2, 0xe0, 0x34,
	0xe0, 0x35, 0x85, 0x3c, 0x06, 0x57, 0xf1, 0x55, 0x3a, 0x02, 0xea, 0xaa, 0xc8, 0xf7, 0xf6, 0xe9,
	0xbd, 0x63, 0x9f, 0xb8, 0x86, 0x2a, 0x13, 0xd5, 0xb9, 0x34, 0x69, 0xf0, 0xa5, 0x76, 0x31, 0x32,
	0xe1, 0x37, 0xd9, 0xfd, 0xb9, 0x34, 0xfb, 0xf7, 0x0b, 0xed, 0x92, 0x8f, 0xc1, 0x41, 0xcd, 0xf6,
	0x02, 0xa5, 0x8c, 0x07, 0x0b, 0x43, 0x05, 0x53, 0x07, 0x7f, 0xc9, 0xaf, 0x01, 0xf6, 0x1a, 0xee,
	0x81, 0xe2, 0x3e, 0x39, 0xe4, 0xee, 0xa5, 0x4b, 0x61, 0x6f, 0xf7, 0xfb, 0xa0, 0xc7, 0x13, 0x70,
	0x6e, 0x4a, 0x59, 0xa9, 0x94, 0x1e, 0x53, 0x65, 0xf7, 0xbf, 0x80, 0x03, 0x26, 0x32, 0xa6, 0xe5,
	0x56, 0x2a, 0x86, 0x4b, 0x9d, 0xab, 0x72, 0xab, 0x56, 0x1d, 0x0b, 0xa1, 0x60, 0x5b, 0xc1, 0x3e,
	0xd7, 0x6e, 0xf4, 0x4f, 0x1b, 0x1c, 0xcc, 0x5b, 0x5d, 0x34, 0x3c, 0xb0, 0x17, 0x5f, 0x85, 0x16,
	0xe9, 0xc1, 0xe3, 0x98, 0xd2, 0x74, 0xca, 0xd8, 0x32, 0x9d, 0xc7, 0x5f, 0xa7, 0x34, 0xfe, 0x6d,
	0x12, 0xaf, 0xb0, 0x7a, 0xfc, 0x00, 0x1e, 0x35, 0x91, 0xc9, 0xa2, 0x09, 0xb4, 0xc8, 0x13, 0x20,
	0x4d, 0x80, 0xc6, 0xa3, 0x49, 0xfa, 0x62, 0x31, 0xf9, 0x26, 0x74, 0xc8, 0x29, 0x3c, 0x6d, 0xf0,
	0x15, 0x1b, 0xb1, 0x64, 0x95, 0x8e, 0x17, 0x93, 0x38, 0x4d, 0xe6, 0xe7, 0x23, 0x36, 0x9e, 0x86,
	0x2e, 0xf9, 0x21, 0x7c, 0xd4, 0x30, 0xa6, 0x38, 0xb2, 0x0e, 0x79, 0x0f, 0x42, 0x38, 0x5f, 0x13,
	0xf2, 0xc9, 0x63, 0x08, 0x9b, 0x10, 0x9b, 0x9d, 0xc7, 0x8b, 0x84, 0x85, 0x6d, 0x42, 0xa0, 0xdb,
	0xa0, 0x0b, 0x36, 0x8d, 0x69, 0x18, 0x90, 0x10, 0x8e, 0x10, 0x9b, 0xc7, 0x2c, 0x9d, 0xcc, 0x46,
	0xaf, 0x42, 0x20, 0x8f, 0xe0, 0x04, 0x91, 0x64, 0xb2, 0x6c, 0x36, 0xd0, 0xa9, 0x27, 0xd4, 0xe0,
	0x6a, 0xb9, 0x98, 0xaf, 0xe2, 0xf0, 0x88, 0x3c, 0x85, 0xde, 0x77, 0xd1, 0x66, 0x11, 0xc7, 0x75,
	0x9e, 0x5e, 0xb2, 0x65, 0x9a, 0xcc, 0x47, 0x09, 0x9b, 0x2e, 0xe8, 0xec, 0xf7, 0xf1, 0x24, 0xec,
	0x46, 0x7f, 0x75, 0xf7, 0x05, 0x92, 0x84, 0xd0, 0x4a, 0xc4, 0x8d, 0x7a, 0x27, 0x01, 0x6d, 0xed,
	0xc4, 0x0d, 0x39, 0x03, 0xef, 0x9c, 0x57, 0x57, 0x65, 0x61, 0xce, 0x41, 0xd8, 0x14, 0xcf, 0xc1,
	0xad, 0xc2, 0xa9, 0xa7, 0xff, 0xc9, 0x33, 0xf0, 0xae, 0x78, 0x56, 0x70, 0xd1, 0x6b, 0x9d, 0xb6,
	0xce, 0x3a, 0xc3, 0x8f, 0xf6, 0xcc, 0xa9, 0xc2, 0xe3, 0x4d, 0x25, 0xee, 0xa9, 0x21, 0xe1, 0xbb,
	0x1e, 0x97, 0xe5, 0xf5, 0x9a, 0x4b, 0x75, 0x46, 0x02, 0xea, 0xe7, 0xda, 0x25, 0x9f, 0x9a, 0xca,
	0x34, 0xda, 0x55, 0x57, 0xa6, 0x74, 0x3e, 0xda, 0xcf, 0x75, 0x51, 0x87, 0x4c, 0x91, 0x47, 0x13,
	0xef, 0xac, 0x15, 0x17, 0x6f, 0xb9, 0x98, 0x6d, 0xd5, 0x41, 0x09, 0x68, 0x5b, 0x1a, 0x9f, 0xfc,
	0x12, 0xfc, 0xf3, 0xac, 0xca, 0xaf, 0xb8, 0x30, 0x15, 0xf3, 0xc3, 0x83, 0x2d, 0xe8, 0x00, 0xf5,
	0x8d, 0xd1, 0xff, 0xb7, 0x05, 0xb5, 0x4d, 0x9e, 0x63, 0x61, 0x10, 0x6f, 0x78, 0x65, 0xee, 0xca,
	0xde, 0xf7, 0xc6, 0x0d, 0x2a, 0x15, 0xc7, 0x92, 0x81, 0xff, 0x38, 0xe2, 0x41, 0xb2, 0xde, 0x31,
	0xe2, 0x3b, 0x49, 0x53, 0x59, 0xd8, 0x54, 0x7c, 0x53, 0xd5, 0x95, 0x34, 0xd7, 0x2e, 0x56, 0xca,
	0x55, 0x95, 0x55, 0x3b, 0xd9, 0x94, 0x11, 0x97, 0x82, 0x6c, 0x90, 0xe8, 0x13, 0xa8, 0x9f, 0xea,
	0x43, 0x2b, 0x4d, 0xf1, 0x50, 0xb4, 0xc1, 0x51, 0x5a, 0xb6, 0xd0, 0x42, 0x81, 0x86, 0x76, 0xf4,
	0x0c, 0xea, 0x47, 0x05, 0xe0, 0xa6, 0xa9, 0x26, 0x76, 0xc0, 0x9f, 0xcd, 0xc7, 0xaf, 0x92, 0x49,
	0x1c, 0x5a, 0xe8, 0xc4, 0xaf, 0xb5, 0x63, 0xf7, 0x3f, 0x83, 0x83, 0xac, 0x12, 0x70, 0x12, 0xc9,
	0x85, 0x91, 0x83, 0xb3, 0x93, 0x5c, 0x60, 0xb5, 0x5c, 0x66, 0x52, 0xde, 0xe9, 0x2d, 0x06, 0xd4,
	0xdb, 0x2a, 0xaf, 0xff, 0x39, 0x74, 0x0e, 0xde, 0x32, 0x0a, 0xe9, 0x9a, 0xdf, 0xd7, 0x42, 0xba,
	0xe6, 0xf7, 0x58, 0xe5, 0xde, 0x66, 0x37, 0x3b, 0x6e, 0xc6, 0x69, 0xe7, 0x0b, 0xfb, 0x37, 0xd6,
	0xc1, 0x12, 0x3d, 0xb0, 0xd5, 0xfa, 0x7c, 0x68, 0x7d, 0x19, 0x33, 0xbd, 0x8f, 0xe5, 0x42, 0x1d,
	0xe7, 0x7a, 0x47, 0xad, 0xe8, 0x1f, 0x76, 0x73, 0x55, 0xe3, 0x6a, 0x26, 0xe5, 0x6d, 0xb6, 0xde,
	0x98, 0x27, 0x79, 0x85, 0xf2, 0xc8, 0x4f, 0x1f, 0xd4, 0xee, 0xe3, 0xfa, 0x2a, 0x3f, 0x6c, 0x73,
	0x9e, 0x42, 0x30, 0xbb, 0x54, 0xc2, 0x98, 0x6d, 0x4d, 0x05, 0x0f, 0xd6, 0x35, 0x80, 0x82, 0x32,
	0x26, 0xca, 0xb3, 0x85, 0x82, 0xba, 0x35, 0x3e, 0xf9, 0x18, 0x8e, 0xcd, 0x48, 0xf3, 0x6c, 0x57,
	0x8d, 0x3e, 0x5e, 0x1f, 0x82, 0x58, 0xbf, 0x0f, 0x5c, 0xd9, 0xf3, 0xd4, 0x2c, 0x47, 0xb7, 0x07,
	0x18, 0xf9, 0x39, 0x74, 0xb5, 0x6c, 0x27, 0x5c, 0xae, 0xdf, 0x6c, 0x78, 0xa1, 0x14, 0xda, 0xa6,
	0x5d, 0xf9, 0x00, 0xc5, 0xb5, 0x4e, 0xe6, 0x2b, 0x4d, 0x55, 0xf5, 0x3c, 0xa0, 0x41, 0x51, 0x03,
	0x51, 0x6c, 0xfa, 0xa9, 0x83, 0x17, 0xec, 0x82, 0x35, 0x0a, 0x2d, 0xcc, 0xe7, 0xf9, 0xeb, 0xd0,
	0xc6, 0xff, 0xf9, 0x2a, 0x6c, 0x21, 0x63, 0x3c, 0x1f, 0x9d, 0xc7, 0xa1, 0x83, 0x29, 0x66, 0xaf,
	0x59, 0xe8, 0xa2, 0x31, 0x9a, 0x7f, 0x13, 0x7a, 0xd1, 0x1f, 0xf6, 0xdd, 0x0d, 0x5e, 0xc3, 0x13,
	0x2e, 0xab, 0xf5, 0x26, 0xab, 0xf0, 0x92, 0xd7, 0xc9, 0xed, 0x14, 0x7b, 0x08, 0x5f, 0xe7, 0xb8,
	0xdc, 0x6d, 0x2a, 0x53, 0xa8, 0xdd, 0x1c, 0x1d, 0x94, 0x33, 0x5e, 0x4c, 0xe5, 0x4e, 0xcb, 0xd9,
	0xa5, 0x7e, 0xa5, 0xdd, 0x68, 0x68, 0x9a, 0xa2, 0xa6, 0xfb, 0xf9, 0xdf, 0xcf, 0x88, 0x3e, 0x6d,
	0xfa, 0x21, 0x7d, 0x5b, 0x98, 0xfb, 0x24, 0xc0, 0xdb, 0x42, 0x56, 0x88, 0x2d, 0x4b, 0x51, 0xaf,
	0xc0, 0xd9, 0x96, 0xa2, 0x8a, 0xfe, 0x64, 0x37, 0xfd, 0xd1, 0xfb, 0x8e, 0x21, 0xcf, 0x20, 0xa0,
	0xfc, 0xdb, 0x97, 0xa5, 0xb8, 0xcd, 0xf4, 0xb2, 0xbb, 0xc3, 0x93, 0xba, 0xa9, 0x1a, 0x5c, 0x2a,
	0x98, 0x06, 0xa2, 0x66, 0xe0, 0xc1, 0xa4, 0xfc, 0xdb, 0xfa, 0xd4, 0xea, 0xda, 0x05, 0xa2, 0x41,
	0xf4, 0x74, 0xd2, 0x4c, 0xe7, 0xfe, 0xd7, 0xe9, 0x0c, 0x83, 0x9c, 0xc1, 0x09, 0xe5, 0x52, 0x49,
	0xa5, 0x9e, 0x53, 0x57, 0xb0, 0x13, 0xf1, 0x10, 0xc6, 0x13, 0xaf, 0x87, 0xd7, 0x97, 0x20, 0x80,
	0xf7, 0x62, 0x36, 0x1f, 0x51, 0x73, 0xe2, 0x59, 0xfc, 0x9a, 0x85, 0x76, 0xf4, 0x17, 0xab, 0x69,
	0xff, 0xde, 0x3b, 0x05, 0x4f, 0xc0, 0x9b, 0x5d, 0xaa, 0x7a, 0xab, 0x4f, 0x82, 0xb7, 0x56, 0x1e,
	0x9e, 0x23, 0x85, 0xea, 0x6e, 0xf7, 0xb8, 0x6e, 0x23, 0x07, 0x19, 0xd6, 0x5f, 0x07, 0x7f, 0xfb,
	0x43, 0x50, 0xff, 0xff, 0x4f, 0xb1, 0xf8, 0xc5, 0x06, 0xda, 0x75, 0x37, 0x55, 0xef, 0x85, 0x40,
	0x37, 0x99, 0x9b, 0x76, 0x7f, 0x3c, 0x8d, 0xc7, 0x5f, 0x99, 0x2a, 0xc6, 0xd8, 0x32, 0xb4, 0x51,
	0xa4, 0x13, 0xa5, 0x60, 0x2c, 0x08, 0xb3, 0xf9, 0x97, 0xa1, 0x43, 0x4e, 0xa0, 0xc3, 0xe8, 0x68,
	0x1c, 0xa7, 0x74, 0x91, 0xb0, 0x58, 0x0b, 0x99, 0x8d, 0x97, 0xa1, 0x87, 0x46, 0x32, 0x59, 0x86,
	0x3e, 0x1a, 0x2f, 0xd9, 0x32, 0x6c, 0x0f, 0x9f, 0xe3, 0x59, 0xc4, 0x8f, 0x22, 0xfd, 0xf1, 0x42,
	0x4e, 0x21, 0x58, 0xed, 0x2e, 0x64, 0x2e, 0xd6, 0x17, 0x9c, 0x78, 0xfa, 0x13, 0xa8, 0xef, 0xaa,
	0x0e, 0x2f, 0xfa, 0xe0, 0xcc, 0x7a, 0x6e, 0x5d, 0x78, 0xea, 0xb3, 0xe9, 0x57, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x6a, 0xdd, 0x98, 0xa8, 0x4d, 0x0d, 0x00, 0x00,
}
